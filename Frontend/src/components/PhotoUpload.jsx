// Frontend\src\components\PhotoUpload.jsx

import React, { useState, useRef } from 'react';
import { STYLES } from '../constants/treeConstants';

const PhotoUpload = ({ photo, onPhotoChange, placeholder = "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞" }) => {
  const [isDragging, setIsDragging] = useState(false);
  const [previewUrl, setPreviewUrl] = useState(photo || '');
  const fileInputRef = useRef(null);

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –≤ base64
  const fileToBase64 = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = error => reject(error);
    });
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
  const handleFiles = async (files) => {
    if (files && files.length > 0) {
      const file = files[0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
      if (!file.type.startsWith('image/')) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
      if (file.size > 5 * 1024 * 1024) {
        alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
        return;
      }

      try {
        const base64 = await fileToBase64(file);
        setPreviewUrl(base64);
        onPhotoChange(base64);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
      }
    }
  };

  // Drag & Drop –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleDragEnter = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
    
    const files = e.dataTransfer.files;
    handleFiles(files);
  };

  // –ö–ª–∏–∫ –ø–æ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  const handleClick = () => {
    fileInputRef.current?.click();
  };

  // –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ input
  const handleFileSelect = (e) => {
    const files = e.target.files;
    handleFiles(files);
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
  const handleRemovePhoto = (e) => {
    e.stopPropagation();
    setPreviewUrl('');
    onPhotoChange('');
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º preview –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ photo
  React.useEffect(() => {
    setPreviewUrl(photo || '');
  }, [photo]);

  return (
    <div style={{ marginBottom: '1rem' }}>
      <label style={STYLES.label}>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è:</label>
      
      {/* –û–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ */}
      <div
        style={{
          border: `2px dashed ${isDragging ? '#c0a282' : '#c0a282'}`,
          borderRadius: '8px',
          padding: '1rem',
          textAlign: 'center',
          cursor: 'pointer',
          backgroundColor: isDragging ? '#ffffffc3' : 'white',
          transition: 'all 0.3s ease',
          position: 'relative',
          minHeight: previewUrl ? '200px' : '120px',
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center'
        }}
        onDragEnter={handleDragEnter}
        onDragLeave={handleDragLeave}
        onDragOver={handleDragOver}
        onDrop={handleDrop}
        onClick={handleClick}
      >
        {previewUrl ? (
          <div style={{ position: 'relative', width: '100%', height: '100%' }}>
            <img
              src={previewUrl}
              alt="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"
              style={{
                maxWidth: '100%',
                maxHeight: '160px',
                borderRadius: '4px',
                objectFit: 'contain'
              }}
            />
            <button
              type="button"
              onClick={handleRemovePhoto}
              style={{
                position: 'absolute',
                top: '8px',
                right: '8px',
                background: '#303133',
                color: 'white',
                border: 'none',
                borderRadius: '50%',
                width: '24px',
                height: '24px',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: 'bold',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontFamily: 'Montserrat, sans-serif'
              }}
              title="–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ"
            >
              √ó
            </button>
            <div style={{
              marginTop: '8px',
              fontSize: '12px',
              color: '#303133',
              fontFamily: 'Montserrat, sans-serif'
            }}>
              –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–º–µ–Ω—ã —Ñ–æ—Ç–æ
            </div>
          </div>
        ) : (
          <div>
            <div style={{
              fontSize: '48px',
              color: '#c0a282',
              marginBottom: '8px'
            }}>
              üì∑
            </div>
            <div style={{
              fontSize: '14px',
              color: '#303133',
              fontFamily: 'Montserrat, sans-serif',
              textAlign: 'center'
            }}>
              {placeholder}
            </div>
            <div style={{
              fontSize: '12px',
              color: '#303133',
              fontFamily: 'Montserrat, sans-serif',
              marginTop: '4px',
              opacity: 0.7
            }}>
              –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, GIF (–¥–æ 5MB)
            </div>
          </div>
        )}
      </div>

      {/* –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ */}
      <input
        ref={fileInputRef}
        type="file"
        accept="image/*"
        onChange={handleFileSelect}
        style={{ display: 'none' }}
      />

      {/* –ü–æ–ª–µ –¥–ª—è URL (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ü–∏—è) */}
      <div style={{ marginTop: '8px' }}>
        <input
          type="text"
          value={previewUrl.startsWith('data:') ? '' : previewUrl}
          onChange={(e) => {
            const url = e.target.value;
            setPreviewUrl(url);
            onPhotoChange(url);
          }}
          style={STYLES.input}
          placeholder="–ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ"
        />
      </div>
    </div>
  );
};

export default PhotoUpload;