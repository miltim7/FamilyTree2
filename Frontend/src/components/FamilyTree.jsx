// Frontend\src\components\FamilyTree.jsx

import React, { useState, useEffect } from 'react';
import { STYLES } from '../constants/treeConstants';
import { useFamilyTree } from '../hooks/useFamilyTree';
import { useTreeNavigation } from '../hooks/useTreeNavigation';
import { generateTreeLayout, getBoundaries } from '../utils/treeLayoutUtils';
import { findPersonById, getBloodRelatives } from '../utils/familyUtils';
import PersonNode from './PersonNode';
import TreeConnections from './TreeConnections';
import { PersonInfoModal, AddSpouseModal, AddChildModal } from './Modals';

const FamilyTree = () => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ö—É–∫–∏
  const familyTreeState = useFamilyTree();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–µ—Ä–µ–≤–∞
  const [treeLayout, setTreeLayout] = useState(null);
  const [boundaries, setBoundaries] = useState({ minX: 0, minY: 0, width: 800, height: 600 });

  // –•—É–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const navigationState = useTreeNavigation(treeLayout, boundaries);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–∫–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–∫—Ä—ã—Ç—ã—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π
  useEffect(() => {
    if (familyTreeState.familyData) {
      updateTreeLayout();
    }
  }, [familyTreeState.familyData, familyTreeState.hiddenGenerations]);
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–∫–µ—Ç–∞ –¥–µ—Ä–µ–≤–∞
  const updateTreeLayout = () => {
    try {
      const layout = generateTreeLayout(familyTreeState.familyData, familyTreeState.hiddenGenerations);
      const newBoundaries = getBoundaries(layout);
      
      setTreeLayout(layout);
      setBoundaries(newBoundaries);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞–∫–µ—Ç–∞ –¥–µ—Ä–µ–≤–∞:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –¥–æ–ª–∂–µ–Ω –ª–∏ —É–∑–µ–ª –±—ã—Ç—å –≤–∏–¥–µ–Ω
  const shouldShowNode = (nodeId) => {
    if (!familyTreeState.selectedBranch) return true;
    
    const isSpouse = nodeId.includes('-spouse');
    const normalizedId = nodeId.replace(/-spouse$/, '');
    const bloodRelatives = getBloodRelatives(familyTreeState.familyData, familyTreeState.selectedBranch);
    
    if (bloodRelatives.has(normalizedId)) return true;
    
    if (isSpouse) {
      return bloodRelatives.has(normalizedId);
    }
    
    return false;
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —É–∑–ª—É
  const handleNodeClick = (e, nodeId, nodeType, nodeName) => {
    if (!nodeId) return;
    
    e.stopPropagation();
    
    if (familyTreeState.selectionMode === 'parent') {
      handleParentSelection(nodeId);
    } 
    else if (familyTreeState.selectionMode === 'spouse') {
      handleSpouseSelection(nodeId);
    } 
    else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä—Å–æ–Ω–µ
      const isSpouse = nodeType === 'spouse';
      const baseId = nodeId.replace(/-spouse$/, '');
      const person = findPersonById(familyTreeState.familyData, baseId);
      
      if (person) {
        const personData = isSpouse ? person.spouse : person;
        familyTreeState.setPersonInfoModal({
          isOpen: true,
          person: personData,
          isSpouse: isSpouse
        });
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
  const handleParentSelection = (personId) => {
    try {
      const baseId = personId.replace(/-spouse$/, '');
      const person = findPersonById(familyTreeState.familyData, baseId);
      
      if (!person) {
        console.error('–†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', baseId);
        familyTreeState.showNotification("–†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }
      
      let parentName = person.name || `ID: ${baseId}`;
      if (person.spouse) {
        parentName += ` –∏ ${person.spouse.name || '–°—É–ø—Ä—É–≥(–∞)'}`;
      }
      
      familyTreeState.setChildModal({
        ...familyTreeState.childModal,
        parentId: baseId,
        parentName: parentName,
        isOpen: true
      });
      
      familyTreeState.setSelectionMode(null);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–¥–∏—Ç–µ–ª—è:', error);
      familyTreeState.showNotification("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–¥–∏—Ç–µ–ª—è");
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω—ã –¥–ª—è —Å—É–ø—Ä—É–≥–∞
  const handleSpouseSelection = (nodeId) => {
    try {
      const isSpouse = nodeId.includes('-spouse');
      
      if (isSpouse) {
        familyTreeState.showNotification("–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å—É–ø—Ä—É–≥–∞ –∫ —Å—É–ø—Ä—É–≥—É");
        return;
      }
      
      const baseId = nodeId.replace(/-spouse$/, '');
      const person = findPersonById(familyTreeState.familyData, baseId);
      
      if (!person) {
        familyTreeState.showNotification("–ü–µ—Ä—Å–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        console.error("–ü–µ—Ä—Å–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:", baseId);
        return;
      }
      
      if (person.spouse) {
        familyTreeState.showNotification("–£ —ç—Ç–æ–π –ø–µ—Ä—Å–æ–Ω—ã —É–∂–µ –µ—Å—Ç—å —Å—É–ø—Ä—É–≥(-–∞)");
        return;
      }
      
      familyTreeState.setSpouseModal(prev => ({
        ...prev,
        targetPersonId: baseId,
        targetPersonName: person.name,
        isOpen: true
      }));
      
      familyTreeState.setSelectionMode(null);
      
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä—Å–æ–Ω—ã:", error);
      familyTreeState.showNotification("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä—Å–æ–Ω—ã");
    }
  };

  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  if (familyTreeState.loading) {
    return (
      <div style={STYLES.container}>
        <div style={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          minHeight: '60vh',
          backgroundColor: 'white',
          borderRadius: '0.5rem',
          boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
          padding: '2rem',
          textAlign: 'center'
        }}>
          <div style={{
            width: '50px',
            height: '50px',
            border: '4px solid #f3f4f6',
            borderTop: '4px solid #3b82f6',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite',
            marginBottom: '1rem'
          }}></div>
          <h2>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–º–µ–π–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞...</h2>
          <p>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...</p>
        </div>
      </div>
    );
  }

  // –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  if (!familyTreeState.isServerConnected) {
    return (
      <div style={STYLES.container}>
        <div style={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          minHeight: '60vh',
          backgroundColor: 'white',
          borderRadius: '0.5rem',
          boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
          padding: '2rem',
          textAlign: 'center',
          maxWidth: '600px'
        }}>
          <h2 style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#dc2626', marginBottom: '1rem' }}>
            ‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
          </h2>
          <p style={{ fontSize: '1rem', color: '#6b7280', marginBottom: '0.5rem', lineHeight: '1.5' }}>
            –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Å–µ–º–µ–π–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
          </p>
          <p style={{ fontSize: '0.875rem', color: '#9ca3af', marginBottom: '0.5rem' }}>
            –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000
          </p>
          <button 
            onClick={familyTreeState.loadFamilyData}
            style={{
              padding: '0.5rem 1rem',
              borderRadius: '0.375rem',
              cursor: 'pointer',
              border: 'none',
              fontWeight: '500',
              backgroundColor: '#2563eb',
              color: 'white',
              marginTop: '1rem'
            }}
          >
            üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  // –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  if (familyTreeState.error) {
    return (
      <div style={STYLES.container}>
        <div style={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          minHeight: '60vh',
          backgroundColor: 'white',
          borderRadius: '0.5rem',
          boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
          padding: '2rem',
          textAlign: 'center'
        }}>
          <h2 style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#dc2626', marginBottom: '1rem' }}>
            ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
          </h2>
          <p style={{ fontSize: '1rem', color: '#6b7280', marginBottom: '1rem' }}>
            {familyTreeState.error}
          </p>
          <button 
            onClick={familyTreeState.loadFamilyData}
            style={{
              padding: '0.5rem 1rem',
              borderRadius: '0.375rem',
              cursor: 'pointer',
              border: 'none',
              fontWeight: '500',
              backgroundColor: '#2563eb',
              color: 'white'
            }}
          >
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
          </button>
        </div>
      </div>
    );
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ—Ä–µ–≤–∞
  const renderFamilyTree = () => {
    if (!treeLayout || !treeLayout.nodes || !Array.isArray(treeLayout.nodes) || treeLayout.nodes.length === 0) {
      return <text x="100" y="100" fontSize="16">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</text>;
    }
    
    return (
      <g>
        {/* –°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ */}
        <TreeConnections 
          connections={treeLayout.connections}
          hoveredPerson={familyTreeState.hoveredPerson}
          setHoveredPerson={familyTreeState.setHoveredPerson}
          isGenerationHidden={familyTreeState.isGenerationHidden}
          onToggleGeneration={familyTreeState.toggleGeneration}
        />
        
        {/* –£–∑–ª—ã (–ø–µ—Ä—Å–æ–Ω—ã –∏ —Å—É–ø—Ä—É–≥–∏) */}
        {treeLayout.nodes.map((node, index) => (
          <PersonNode
            key={`node-${node.id}-${index}`}
            node={node}
            familyData={familyTreeState.familyData}
            hoveredPerson={familyTreeState.hoveredPerson}
            setHoveredPerson={familyTreeState.setHoveredPerson}
            selectedPerson={familyTreeState.selectedPerson}
            selectionMode={familyTreeState.selectionMode}
            selectedBranch={familyTreeState.selectedBranch}
            shouldShowNode={shouldShowNode}
            onNodeClick={handleNodeClick}
            onBranchToggle={familyTreeState.toggleBranch}
          />
        ))}
      </g>
    );
  };
  
  // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä
  return (
    <div style={STYLES.container}>
      <h1 style={STYLES.title}>
        –°–µ–º–µ–π–Ω–æ–µ –¥—Ä–µ–≤–æ 
        {!familyTreeState.isServerConnected && (
          <span style={{
            fontSize: '1rem',
            color: '#ef4444',
            backgroundColor: '#fef2f2',
            padding: '0.25rem 0.5rem',
            borderRadius: '0.375rem',
            border: '1px solid #fecaca'
          }}>
            üì° –û—Ñ–ª–∞–π–Ω
          </span>
        )}
      </h1>
      
      <div style={STYLES.svgContainer} data-svg-container="true">
        {familyTreeState.selectionMode && (
          <div style={STYLES.activeMode}>
            {familyTreeState.selectionMode === 'parent' ? '–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—è' : '–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω—ã –¥–ª—è —Å—É–ø—Ä—É–≥–∞'}
          </div>
        )}
        
        <svg
          ref={navigationState.svgRef}
          width="100%"
          height="100%"
          style={{ 
            cursor: navigationState.isDragging ? 'grabbing' : (familyTreeState.selectionMode ? 'pointer' : 'grab'),
            userSelect: 'none',
            touchAction: 'none'
          }}
          onMouseDown={familyTreeState.selectionMode ? undefined : navigationState.handleMouseDown}
          onDoubleClick={navigationState.handleDoubleClick}
        >
          <g transform={`translate(${navigationState.position.x}, ${navigationState.position.y}) scale(${navigationState.scale})`}>
            {renderFamilyTree()}
          </g>
        </svg>
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div style={STYLES.buttonsContainer}>
        <button
          onClick={familyTreeState.openChildModal}
          style={{ 
            ...STYLES.button, 
            ...STYLES.greenButton,
            opacity: familyTreeState.loading ? 0.5 : 1
          }}
          disabled={familyTreeState.loading}
        >
          –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞
        </button>
        
        <button
          onClick={familyTreeState.openSpouseModal}
          style={{ 
            ...STYLES.button, 
            ...STYLES.purpleButton,
            opacity: familyTreeState.loading ? 0.5 : 1
          }}
          disabled={familyTreeState.loading}
        >
          –î–æ–±–∞–≤–∏—Ç—å —Å—É–ø—Ä—É–≥–∞(-—É)
        </button>
        
        {familyTreeState.selectedBranch && (
          <button
            onClick={() => familyTreeState.setSelectedBranch(null)}
            style={{ ...STYLES.button, ...STYLES.defaultViewButton }}
          >
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M5 12h14M12 5l7 7-7 7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
            –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤
          </button>
        )}
        
        {Object.keys(familyTreeState.hiddenGenerations).length > 0 && (
          <button
            onClick={familyTreeState.resetHiddenGenerations}
            style={{ ...STYLES.button, ...STYLES.defaultViewButton }}
          >
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12Z" stroke="currentColor" strokeWidth="2" fill="none"/>
              <path d="M12 8V16M8 12H16" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
            </svg>
            –í–∏–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          </button>
        )}
        
        <button
          onClick={navigationState.centerTree}
          style={{ ...STYLES.button, ...STYLES.defaultViewButton }}
        >
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 4L12 20M20 12L4 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
            <path d="M17 7L7 17M7 7L17 17" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
          </svg>
          –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
        </button>
        
        <button
          onClick={familyTreeState.loadFamilyData}
          style={{ 
            ...STYLES.button, 
            ...STYLES.grayButton,
            opacity: familyTreeState.loading ? 0.5 : 1
          }}
          disabled={familyTreeState.loading}
        >
          {familyTreeState.loading ? '‚è≥' : 'üîÑ'} –û–±–Ω–æ–≤–∏—Ç—å
        </button>
      </div>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
      <div style={STYLES.instructionPanel}>
        <h3 style={STYLES.instructionTitle}>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</h3>
        <ul style={STYLES.instructionItems}>
          <li style={STYLES.instructionItem}>–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞", —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–¥–∏—Ç–µ–ª—è</li>
          <li style={STYLES.instructionItem}>–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å —Å—É–ø—Ä—É–≥–∞(-—É)" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—ã –∫ –ø–µ—Ä—Å–æ–Ω–µ</li>
          <li style={STYLES.instructionItem}><strong>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –ø–µ—Ä—Å–æ–Ω—ã</strong> - –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π</li>
          <li style={STYLES.instructionItem}>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '-' –Ω–∞ –ª–∏–Ω–∏–∏, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏–µ</li>
          <li style={STYLES.instructionItem}>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '+' –Ω–∞ –ø—É–Ω–∫—Ç–∏—Ä–Ω–æ–π –ª–∏–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ</li>
          <li style={STYLES.instructionItem}><strong>–ù–∞–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –ø–µ—Ä—Å–æ–Ω—ã</strong> - –ø–æ—è–≤–∏—Ç—Å—è –∏–∫–æ–Ω–∫–∞ –¥–µ—Ä–µ–≤–∞ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É</li>
          <li style={STYLES.instructionItem}><strong>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –¥–µ—Ä–µ–≤–∞</strong> - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–µ—Ç–∫–∞ —ç—Ç–æ–≥–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ (–ø—Ä–µ–¥–∫–∏, –ø–æ—Ç–æ–º–∫–∏, —Å—É–ø—Ä—É–≥–∏)</li>
          <li style={STYLES.instructionItem}><strong>–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫ –Ω–∞ –∏–∫–æ–Ω–∫—É</strong> –∏–ª–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤" –≤–µ—Ä–Ω–µ—Ç –ø–æ–ª–Ω—ã–π –≤–∏–¥</li>
          <li style={STYLES.instructionItem}>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl + –∫–æ–ª–µ—Å–æ –º—ã—à–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</li>
          <li style={STYLES.instructionItem}>üíæ <strong>–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!</strong></li>
        </ul>
      </div>
      
      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      <PersonInfoModal 
        modal={familyTreeState.personInfoModal}
        onClose={familyTreeState.cancelModals}
      />
      
      <AddSpouseModal 
        modal={familyTreeState.spouseModal}
        onModalChange={(updates) => familyTreeState.setSpouseModal(prev => ({ ...prev, ...updates }))}
        onClose={familyTreeState.cancelModals}
        onStartSelection={familyTreeState.startSpousePersonSelection}
        onConfirm={familyTreeState.confirmAddSpouse}
      />
      
      <AddChildModal 
        modal={familyTreeState.childModal}
        onModalChange={(updates) => familyTreeState.setChildModal(prev => ({ ...prev, ...updates }))}
        onClose={familyTreeState.cancelModals}
        onStartSelection={familyTreeState.startParentSelection}
        onConfirm={familyTreeState.confirmAddChild}
      />
      
      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∂–∏–º–µ –≤—ã–±–æ—Ä–∞ */}
      {familyTreeState.selectionMode && (
        <div style={{
          ...STYLES.selectionModeNotice,
          backgroundColor: familyTreeState.selectionMode === 'parent' ? '#059669' : '#7c3aed',
        }}>
          <div style={STYLES.selectionModeTitle}>
            {familyTreeState.selectionMode === 'parent' ? '–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—è' : '–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω—ã –¥–ª—è —Å—É–ø—Ä—É–≥–∞'}
          </div>
          <div>
            {familyTreeState.selectionMode === 'parent' 
              ? '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –ø–µ—Ä—Å–æ–Ω—É –≤ –¥–µ—Ä–µ–≤–µ.'
              : '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—É–ø—Ä—É–≥–∞(-–∏). –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω—É –±–µ–∑ —Å—É–ø—Ä—É–≥–∞.'
            }
          </div>
          <button
            onClick={familyTreeState.cancelModals}
            style={STYLES.selectionModeButton}
          >
            –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞
          </button>
        </div>
      )}
      
      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      {familyTreeState.notification && (
        <div style={{
          position: 'fixed',
          top: '20px',
          right: '20px',
          color: 'white',
          padding: '10px 20px',
          borderRadius: '6px',
          boxShadow: '0 2px 10px rgba(0, 0, 0, 0.2)',
          zIndex: 100,
          opacity: 1,
          transition: 'opacity 0.3s ease',
          backgroundColor: familyTreeState.notification.type === 'success' ? '#059669' : '#ef4444'
        }}>
          {familyTreeState.notification.type === 'success' ? '‚úÖ' : '‚ö†Ô∏è'} {familyTreeState.notification.message}
        </div>
      )}

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
      <div style={{
        position: 'fixed',
        bottom: '1rem',
        right: '1rem',
        fontSize: '0.875rem',
        padding: '0.5rem 1rem',
        borderRadius: '0.375rem',
        backgroundColor: familyTreeState.isServerConnected ? '#d1fae5' : '#fee2e2',
        color: familyTreeState.isServerConnected ? '#065f46' : '#991b1b',
        border: familyTreeState.isServerConnected ? '1px solid #a7f3d0' : '1px solid #fecaca'
      }}>
        {familyTreeState.isServerConnected ? 'üü¢ –°–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω' : 'üî¥ –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
      </div>
    </div>
  );
};

export default FamilyTree;